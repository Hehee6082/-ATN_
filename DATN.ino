#include <WiFi.h>
#include <WiFiUdp.h>

// ====== C·∫•u h√¨nh Wi-Fi ======
const char* ssid = "HLHUST BRO_2.4G";
const char* password = "12356789";

WiFiUDP udp;
const int UDP_PORT = 4210;
char incomingPacket[255]; // buffer nh·∫≠n d·ªØ li·ªáu

// ====== C·∫•u h√¨nh ch√¢n L298N ======
#define IN1 0
#define IN2 1
#define IN3 8
#define IN4 9
#define ENA 5
#define ENB 6

#define MOTOR_SPEED 150
#define TURN_SPEED 255

// ====== C·∫£m bi·∫øn IR ======
#define IR_LEFT       3  // c·∫£m bi·∫øn tr√°i
#define IR_RIGHT      4  // c·∫£m bi·∫øn ph·∫£i
#define IR_LEFT_OUTER 2  // c·∫£m bi·∫øn tr√°i ngo√†i c√πng
#define IR_RIGHT_OUTER 7 // c·∫£m bi·∫øn ph·∫£i ngo√†i c√πng

bool autoMode = false;

// ====== SETUP ======
void setup() {
  Serial.begin(115200);

  // Kh·ªüi ƒë·ªông WiFi
  WiFi.begin(ssid, password);
  Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
  Serial.print("IP ESP32: ");
  Serial.println(WiFi.localIP());

  // B·∫Øt ƒë·∫ßu UDP
  udp.begin(UDP_PORT);
  Serial.printf("üü¢ ƒêang ch·ªù l·ªánh UDP t·∫°i c·ªïng %d...\n", UDP_PORT);

  // C·∫•u h√¨nh c√°c ch√¢n ƒëi·ªÅu khi·ªÉn
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // C·∫•u h√¨nh c·∫£m bi·∫øn IR
  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT);
  pinMode(IR_LEFT_OUTER, INPUT);  // C·∫£m bi·∫øn tr√°i ngo√†i c√πng
  pinMode(IR_RIGHT_OUTER, INPUT); // C·∫£m bi·∫øn ph·∫£i ngo√†i c√πng

  stopMotors();
}

// ====== LOOP ======
void loop() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    int len = udp.read(incomingPacket, 255);
    if (len > 0) {
      incomingPacket[len] = 0;
      String cmd = String(incomingPacket);

      Serial.printf("üì© Nh·∫≠n l·ªánh: %s\n", incomingPacket);

      if (cmd == "auto") {
        autoMode = true;
        Serial.println("üîÅ Ch·∫ø ƒë·ªô AUTO FOLLOW LINE k√≠ch ho·∫°t");
      } else if (cmd == "stop_auto") {
        autoMode = false;
        stopMotors();
        Serial.println("üõë D·ª´ng ch·∫ø ƒë·ªô AUTO FOLLOW LINE");
      } else {
        autoMode = false;
        handleCommand(cmd[0]);
      }
    }
  }

  if (autoMode) {
    followLine();
  }
}

// ====== X·ª¨ L√ù L·ªÜNH MANUAL ======
void handleCommand(char cmd) {
  switch (cmd) {
    case 'f': moveForward(MOTOR_SPEED); break;
    case 'b': moveBackward(); break;
    case 'l': turnLeft(TURN_SPEED); break;
    case 'r': turnRight(TURN_SPEED); break;
    case 's': stopMotors(); break;
    default: stopMotors(); break;
  }
}

// ====== H√ÄM LINE FOLLOWER ======
void followLine() {
  bool left = digitalRead(IR_LEFT);        // C·∫£m bi·∫øn tr√°i
  bool right = digitalRead(IR_RIGHT);     // C·∫£m bi·∫øn ph·∫£i
  bool leftOuter = digitalRead(IR_LEFT_OUTER);   // Tr√°i ngo√†i c√πng
  bool rightOuter = digitalRead(IR_RIGHT_OUTER); // Ph·∫£i ngo√†i c√πng

  Serial.print("LEFT: ");
  Serial.print(left);
  Serial.print(" | RIGHT: ");
  Serial.print(right);
  Serial.print(" | LEFT_OUTER: ");
  Serial.print(leftOuter);
  Serial.print(" | RIGHT_OUTER: ");
  Serial.println(rightOuter);

  // Tr∆∞·ªùng h·ª£p t·∫•t c·∫£ c·∫£m bi·∫øn ƒë·ªÅu tr√™n line ƒëen
  if (left == LOW && right == LOW && leftOuter == LOW && rightOuter == LOW) {
    Serial.println("üõë T·∫•t c·∫£ c·∫£m bi·∫øn ƒë·ªÅu tr√™n line - D·ª´ng l·∫°i");
    stopMotors();
  } 
  // Tr∆∞·ªùng h·ª£p t·∫•t c·∫£ c·∫£m bi·∫øn ƒë·ªÅu tr√™n n·ªÅn tr·∫Øng
  else if (left == HIGH && right == HIGH && leftOuter == HIGH && rightOuter == HIGH) {
    Serial.println("‚¨ÜÔ∏è T·∫•t c·∫£ c·∫£m bi·∫øn ƒë·ªÅu tr·∫Øng - ƒêi th·∫≥ng");
    moveForward(110);
  } 
  // Tr∆∞·ªùng h·ª£p c·∫£m bi·∫øn b√™n tr√°i ph√°t hi·ªán line
  else if (left == LOW || leftOuter == LOW) {
    Serial.println("‚Ü©Ô∏è M·ªôt trong c√°c c·∫£m bi·∫øn b√™n tr√°i tr√™n line - R·∫Ω tr√°i");
    turnLeft(250);
    delay(30);
  } 
  // Tr∆∞·ªùng h·ª£p c·∫£m bi·∫øn b√™n ph·∫£i ph√°t hi·ªán line
  else if (right == LOW || rightOuter == LOW) {
    Serial.println("‚Ü™Ô∏è M·ªôt trong c√°c c·∫£m bi·∫øn b√™n ph·∫£i tr√™n line - R·∫Ω ph·∫£i");
    turnRight(250);
    delay(30);
  } 
  // N·∫øu kh√¥ng r∆°i v√†o c√°c tr∆∞·ªùng h·ª£p tr√™n
  else {
    Serial.println("üõë M·∫•t line ho·∫∑c kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c h∆∞·ªõng - D·ª´ng l·∫°i");
    stopMotors();
  }

  delay(10); // Th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh nhi·ªÖu
}


// ====== H√ÄM ƒêI·ªÄU KHI·ªÇN ƒê·ªòNG C∆† ======
void moveForward(int speed) {
  analogWrite(ENA, speed);
  analogWrite(ENB, speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void moveBackward() {
  analogWrite(ENA, MOTOR_SPEED);
  analogWrite(ENB, MOTOR_SPEED);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void turnRight(int r_speed) {
  analogWrite(ENA, r_speed);
  analogWrite(ENB, r_speed);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void turnLeft(int l_speed) {
  analogWrite(ENA, l_speed);
  analogWrite(ENB, l_speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void stopMotors() {
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
}
